package com.example.accessingdatamysql.controllers;

import com.example.accessingdatamysql.model.User;
import com.example.accessingdatamysql.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String firstName
			, @RequestParam String lastName, @RequestParam String email, @RequestParam String password) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setFirstName(firstName);
		n.setLastName(lastName);
		n.setEmail(email);
		n.setPassword(password);
		userRepository.save(n);
		return "Saved";
	}

	@RequestMapping("/delete_users")
	public void delete (@RequestParam int id) {
		userRepository.deleteById(id);
	}

    @PutMapping (path = "/update_user")
	public void updateUser (@RequestParam (value="id", defaultValue = "") int id, @RequestParam (value="firstName", defaultValue = "") String firstName,
							@RequestParam (value="lastName", defaultValue = "") String lastName, @RequestParam (value="email", defaultValue = "")String email, @RequestParam (value="password", defaultValue = "") String password)
	{
		User n = new User();
		n.setId(id);
		n.setFirstName(firstName);
		n.setLastName(lastName);
		n.setEmail(email);
		n.setPassword(password);
		userRepository.save(n);
	}

	//localhost:8080/user/101
	@GetMapping(path="/user/{id}")
	public @ResponseBody
	String showUser(@PathVariable("id") String this_id) {
		System.out.println("this is id->" + this_id);
		return "Using @PathVariable";
	}

	@GetMapping(value="list", produces= {MediaType.APPLICATION_JSON_VALUE})
	@ResponseBody
	public User list(){
		//from the database.
		User u = new User();
		u.setFirstName("Bryan");
		u.setEmail("ytbryan@hey.com");
		return u;
	}

//	@PutMapping(path = "/update_email")
//	public void updateEmail (@RequestParam int id, @RequestParam String email) {
//
//	}

//	//localhost:8080/products/test
//	@GetMapping(path="/test") // Temporarily using GET for testing ONLY.
//	public @ResponseBody String test(@RequestParam(value="name")String this_name) {
//		System.out.println(this_name);
//		return "Added!";
//	}


//	@GetMapping(path="/all_user")
//	public @ResponseBody Iterable<User> getAllUsers() {
//
//		// This returns a JSON or XML with the users
//		return userRepository.findAll();
//	}
}
